name: Build OpenWrt Package

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build OpenWrt Package
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target:
          - "x86/64"
          - "ramips/mt7621" 
          - "ath79/generic"
          - "bcm27xx/bcm2708"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Free disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        df -h
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev \
          libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget
          
    - name: Set target variables
      id: target
      run: |
        TARGET="${{ matrix.target }}"
        echo "target=${TARGET}" >> $GITHUB_OUTPUT
        echo "target_arch=${TARGET%/*}" >> $GITHUB_OUTPUT
        echo "target_subtarget=${TARGET#*/}" >> $GITHUB_OUTPUT
        
    - name: Cache OpenWrt SDK
      uses: actions/cache@v4
      with:
        path: openwrt-sdk
        key: openwrt-sdk-${{ steps.target.outputs.target }}-${{ hashFiles('.github/workflows/build-openwrt.yml') }}
        
    - name: Download OpenWrt SDK
      run: |
        TARGET_ARCH="${{ steps.target.outputs.target_arch }}"
        TARGET_SUBTARGET="${{ steps.target.outputs.target_subtarget }}"
        
        # Use latest stable release (adjust version as needed)
        OPENWRT_VERSION="23.05.2"
        SDK_URL="https://downloads.openwrt.org/releases/${OPENWRT_VERSION}/targets/${TARGET_ARCH}/${TARGET_SUBTARGET}/openwrt-sdk-${OPENWRT_VERSION}-${TARGET_ARCH}-${TARGET_SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        echo "Downloading SDK from: $SDK_URL"
        wget -O sdk.tar.xz "$SDK_URL" || {
          echo "Failed to download SDK for ${{ matrix.target }}"
          echo "URL: $SDK_URL"
          exit 1
        }
        
        tar -xf sdk.tar.xz
        mv openwrt-sdk-* openwrt-sdk
        
    - name: Prepare package
      run: |
        # Copy our package to the SDK
        mkdir -p openwrt-sdk/package/pppoe-watchdog
        cp Makefile openwrt-sdk/package/pppoe-watchdog/
        cp *.sh *.conf *.init openwrt-sdk/package/pppoe-watchdog/
        
    - name: Configure SDK
      working-directory: openwrt-sdk
      run: |
        # Update feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # Configure build
        make defconfig
        
    - name: Build package
      working-directory: openwrt-sdk
      run: |
        make package/pppoe-watchdog/compile V=s
        
    - name: Collect artifacts
      run: |
        mkdir -p artifacts
        find openwrt-sdk/bin -name "*pppoe-watchdog*" -type f -exec cp {} artifacts/ \;
        ls -la artifacts/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pppoe-watchdog-${{ steps.target.outputs.target_arch }}-${{ steps.target.outputs.target_subtarget }}
        path: artifacts/
        retention-days: 30
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
        
    - name: Organize release files
      run: |
        mkdir -p release
        find release-artifacts -name "*.ipk" -exec cp {} release/ \;
        ls -la release/
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: PPPoE Watchdog ${{ github.ref_name }}
        body: |
          ## PPPoE Watchdog ${{ github.ref_name }}
          
          Automatic PPPoE connection monitoring and DSL modem reboot system for OpenWRT.
          
          ### Installation
          ```bash
          opkg install pppoe-watchdog_*.ipk
          ```
          
          ### Configuration
          Edit `/etc/watchdog.conf` with your Mikrotik switch details.
          
          ### Usage
          ```bash
          /etc/init.d/pppoe-watchdog start
          ```
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      run: |
        # Install GitHub CLI
        sudo apt-get update
        sudo apt-get install -y gh
        
        # Upload all .ipk files to the release
        for file in release/*.ipk; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            gh release upload ${{ github.ref_name }} "$file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}