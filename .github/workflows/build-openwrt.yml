name: Build OpenWrt Package

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build OpenWrt Package
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - "x86/64"
          - "armsr/armv8"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev \
          libssl-dev python3-setuptools rsync unzip zlib1g-dev \
          file wget

    - name: Set target variables
      id: target
      run: |
        TARGET="${{ matrix.target }}"
        echo "target=${TARGET}" >> $GITHUB_OUTPUT
        echo "target_arch=${TARGET%/*}" >> $GITHUB_OUTPUT
        echo "target_subtarget=${TARGET#*/}" >> $GITHUB_OUTPUT

    - name: Cache OpenWrt SDK
      uses: actions/cache@v4
      with:
        path: openwrt-sdk
        key: openwrt-sdk-24.10-${{ steps.target.outputs.target }}-${{ hashFiles('.github/workflows/build-openwrt.yml') }}

    - name: Download OpenWrt SDK
      run: |
        TARGET_ARCH="${{ steps.target.outputs.target_arch }}"
        TARGET_SUBTARGET="${{ steps.target.outputs.target_subtarget }}"

        # Use latest stable release OpenWrt 24.10
        OPENWRT_VERSION="24.10.0"
        BASE_URL="https://downloads.openwrt.org/releases/${OPENWRT_VERSION}/targets/${TARGET_ARCH}/${TARGET_SUBTARGET}"

        echo "Discovering available SDK files at: $BASE_URL"

        # Get directory listing and find SDK files (try both .tar.xz and .tar.zst)
        AVAILABLE_FILES=$(curl -s "$BASE_URL/" | grep -o 'href="[^"]*sdk[^"]*\.tar\.[xz][sz][txt]"' | sed 's/href="//;s/"//' || true)

        if [ -z "$AVAILABLE_FILES" ]; then
          # Try alternative pattern matching
          AVAILABLE_FILES=$(curl -s "$BASE_URL/" | grep -i sdk | grep -o 'href="[^"]*\.tar\.[^"]*"' | sed 's/href="//;s/"//' || true)
        fi

        if [ -z "$AVAILABLE_FILES" ]; then
          echo "No SDK files found in directory listing"
          echo "Directory contents (.tar files):"
          curl -s "$BASE_URL/" | grep -o 'href="[^"]*\.tar\.[^"]*"' | sed 's/href="//;s/"//' | head -10
          exit 1
        fi

        echo "Available SDK files:"
        echo "$AVAILABLE_FILES"

        # Try to download the first available SDK file
        SDK_FILE=$(echo "$AVAILABLE_FILES" | head -n1)

        if [ -z "$SDK_FILE" ]; then
          echo "No SDK file found"
          exit 1
        fi

        SDK_URL="$BASE_URL/$SDK_FILE"
        echo "Downloading SDK from: $SDK_URL"

        # Determine compression type and download
        if echo "$SDK_FILE" | grep -q '\.zst$'; then
          ARCHIVE_FILE="sdk.tar.zst"
        else
          ARCHIVE_FILE="sdk.tar.xz"
        fi

        if wget -O "$ARCHIVE_FILE" "$SDK_URL"; then
          echo "Successfully downloaded SDK: $SDK_FILE"
        else
          echo "Failed to download SDK: $SDK_FILE"
          exit 1
        fi

        # Extract based on compression type
        if [ "$ARCHIVE_FILE" = "sdk.tar.zst" ]; then
          # Install zstd if not available
          sudo apt-get install -y zstd
          tar --use-compress-program=zstd -xf "$ARCHIVE_FILE"
        else
          tar -xf "$ARCHIVE_FILE"
        fi
        mv openwrt-sdk-* openwrt-sdk

    - name: Test package structure
      run: |
        echo "Testing package structure..."

        # Check required files exist
        for file in pppoe-monitor.sh mikrotik-control.sh pppoe-watchdog.sh; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Missing required file: $file"
            exit 1
          fi
          echo "✓ Found $file"
        done

        # Check files directory structure
        if [ ! -d "files/etc/init.d" ]; then
          echo "ERROR: Missing files/etc/init.d directory"
          exit 1
        fi

        if [ ! -f "files/etc/init.d/pppoe-watchdog" ]; then
          echo "ERROR: Missing init script"
          exit 1
        fi

        if [ ! -f "files/etc/config/pppoe-watchdog" ]; then
          echo "ERROR: Missing config file"
          exit 1
        fi

        # Check shell scripts are executable
        for script in *.sh; do
          if [ ! -x "$script" ]; then
            echo "WARNING: $script is not executable"
          fi
        done

        # Makefile syntax will be validated during the actual build step

        echo "✓ Package structure tests passed"

    - name: Prepare package
      run: |
        # Copy our package to the SDK
        mkdir -p openwrt-sdk/package/pppoe-watchdog
        cp Makefile openwrt-sdk/package/pppoe-watchdog/
        cp *.sh openwrt-sdk/package/pppoe-watchdog/
        cp -r files openwrt-sdk/package/pppoe-watchdog/

    - name: Configure SDK
      working-directory: openwrt-sdk
      run: |
        # Update feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a

        # Configure build
        make defconfig

    - name: Build package
      working-directory: openwrt-sdk
      run: |
        make package/pppoe-watchdog/compile V=s

    - name: Validate IPK package
      run: |
        # Find the generated IPK file
        IPK_FILE=$(find openwrt-sdk/bin -name "*pppoe-watchdog*.ipk" -type f | head -1)

        if [ -z "$IPK_FILE" ]; then
          echo "ERROR: No IPK file found"
          exit 1
        fi

        echo "Found IPK: $IPK_FILE"

        # Check if IPK is a valid archive (OpenWrt uses ar format)
        echo "IPK file type:"
        file "$IPK_FILE"

        if ! file "$IPK_FILE" | grep -qE "(ar archive|current ar archive)"; then
          echo "ERROR: IPK file is not a valid ar archive"
          exit 1
        fi

        # Extract and validate package structure
        mkdir -p ipk-test
        cd ipk-test
        ar x "$IPK_FILE"

        # Check for required files (could be .gz, .xz, or .zst)
        echo "IPK contents:"
        ls -la

        # Look for control archive (various compression formats)
        CONTROL_ARCHIVE=""
        for ext in control.tar.gz control.tar.xz control.tar.zst; do
          if [ -f "$ext" ]; then
            CONTROL_ARCHIVE="$ext"
            break
          fi
        done

        if [ -z "$CONTROL_ARCHIVE" ]; then
          echo "ERROR: Missing control archive in IPK"
          exit 1
        fi

        # Look for data archive (various compression formats)
        DATA_ARCHIVE=""
        for ext in data.tar.gz data.tar.xz data.tar.zst; do
          if [ -f "$ext" ]; then
            DATA_ARCHIVE="$ext"
            break
          fi
        done

        if [ -z "$DATA_ARCHIVE" ]; then
          echo "ERROR: Missing data archive in IPK"
          exit 1
        fi

        # Extract and validate control files
        echo "Control archive contents:"
        tar -tf "$CONTROL_ARCHIVE" | sort

        # Extract and validate data files
        echo "Data archive contents:"
        tar -tf "$DATA_ARCHIVE" | sort

        # Verify expected files are present
        if ! tar -tf "$DATA_ARCHIVE" | grep -q "usr/bin/pppoe-watchdog.sh"; then
          echo "ERROR: Missing main script in package"
          exit 1
        fi

        if ! tar -tf "$DATA_ARCHIVE" | grep -q "etc/init.d/pppoe-watchdog"; then
          echo "ERROR: Missing init script in package"
          exit 1
        fi

        if ! tar -tf "$DATA_ARCHIVE" | grep -q "etc/config/pppoe-watchdog"; then
          echo "ERROR: Missing config file in package"
          exit 1
        fi

        echo "✓ IPK package validation passed"

    - name: Collect artifacts
      run: |
        mkdir -p artifacts
        find openwrt-sdk/bin -name "*pppoe-watchdog*" -type f -exec cp {} artifacts/ \;
        ls -la artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pppoe-watchdog-${{ steps.target.outputs.target_arch }}-${{ steps.target.outputs.target_subtarget }}
        path: artifacts/
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Organize release files
      run: |
        mkdir -p release
        find release-artifacts -name "*.ipk" -exec cp {} release/ \;
        ls -la release/

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: PPPoE Watchdog ${{ github.ref_name }}
        body: |
          ## PPPoE Watchdog ${{ github.ref_name }}

          Automatic PPPoE connection monitoring and DSL modem reboot system for OpenWRT.

          ### Installation
          ```bash
          opkg install pppoe-watchdog_*.ipk
          ```

          ### Configuration
          Edit `/etc/watchdog.conf` with your Mikrotik switch details.

          ### Usage
          ```bash
          /etc/init.d/pppoe-watchdog start
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        # Install GitHub CLI
        sudo apt-get update
        sudo apt-get install -y gh

        # Upload all .ipk files to the release
        for file in release/*.ipk; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            gh release upload ${{ github.ref_name }} "$file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
